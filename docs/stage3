Stage 3: Technical Documentation

1. User Stories et Mockups

1.1 User Stories (Priorité MoSCoW)
Must Have
1. Authentification
- En tant qu'utilisateur, je veux pouvoir créer un compte et me connecter pour accéder à mes histoires personnalisées
- En tant qu'utilisateur, je veux pouvoir me déconnecter pour sécuriser mon compte
2. Génération d'Histoires
- En tant que parent, je veux pouvoir générer une histoire personnalisée en spécifiant le nom de l'enfant, son âge et le thème
- En tant qu'utilisateur, je veux pouvoir sauvegarder les histoires générées pour les relire plus tard
3. Gestion des Histoires
- En tant qu'utilisateur, je veux voir la liste de mes histoires sauvegardées
- En tant qu'utilisateur, je veux pouvoir marquer des histoires comme favorites
- En tant qu'utilisateur, je veux pouvoir supprimer les histoires que je ne souhaite plus garder

Should Have
1. Personnalisation
- En tant qu'utilisateur, je veux pouvoir spécifier la longueur de l'histoire (courte, moyenne, longue)
- En tant qu'utilisateur, je veux pouvoir choisir le genre de l'histoire (aventure, éducatif, fantaisie)
2. Interface
- En tant qu'utilisateur, je veux une interface adaptée aux enfants avec des couleurs vives et des animations simples
- En tant qu'utilisateur, je veux pouvoir facilement naviguer entre mes histoires

Could Have
1. Partage
- En tant qu'utilisateur, je veux pouvoir partager une histoire via un lien
- En tant qu'éducateur, je veux pouvoir créer des collections d'histoires

Won't Have
- Génération d'illustrations
- Narration audio
- Mode hors-ligne
- Statistiques de lecture

1.2 Mockups

2. Architecture Système

2.1 Diagramme d'Architecture
[Client Mobile - React Native] --> [API Backend - Firebase]
[API Backend - Firebase] --> [Firebase Authentication]
[API Backend - Firebase] --> [Cloud Firestore]
[API Backend - Firebase] --> [OpenAI API]
[Client Mobile - React Native]  --> [Firebase Authentication]

2.2 Composants Principaux
1. Frontend (React Native + Expo)
- Interface utilisateur cross-platform
- Gestion d'état avec Redux
- Navigation avec React Navigation
2. Backend (Firebase)
- Authentication
- Cloud Firestore
- Cloud Functions
3. Services Externes
- OpenAI API pour la génération de texte
- Firebase Analytics pour le suivi

3. Design des Composants et Base de Données

3.1 Structure des Collections Firestore
Collection: users
json
{
"id": "string",
"email": "string",
"displayName": "string",
"createdAt": "timestamp",
"lastLogin": "timestamp"
}

Collection: stories
json
{
"id": "string",
"userId": "string",
"title": "string",
"content": "string",
"childName": "string",
"childAge": "number",
"theme": "string",
"length": "string",
"genre": "string",
"isFavorite": "boolean",
"createdAt": "timestamp",
"lastRead": "timestamp"
}

3.2 Composants React Native Principaux
Screens
- HomeScreen
- StoryGeneratorScreen
- MyStoriesScreen
- FavoritesScreen
- StoryViewScreen
Components
- StoryCard
- ThemeSelector
- GenerationForm
- FavoriteButton
- NavigationBar

4. Diagrammes de Séquence

4.1 Génération d'Histoire
participant U as User
participant A as App
participant F as Firebase
participant O as OpenAI
U->>A: Remplit formulaire
A->>F: Vérifie authentification
F-->>A: Token valide
A->>O: Requête génération
O-->>A: Histoire générée
A->>F: Sauvegarde histoire
F-->>A: Confirmation
A-->>U: Affiche histoire

5. Spécifications API

5.1 API Externes
OpenAI API
- Endpoint: `https://api.openai.com/v1/completions`
- Méthode: POST
- Headers:
- Authorization: Bearer {API_KEY}
- Content-Type: application/json
- Body:

json
{
"model": "gpt-3.5-turbo",
"messages": [
{
"role": "system",
"content": "Generate a children's story..."
}
]
}

5.2 API Internes (Firebase Cloud Functions)
Générer Histoire
- Endpoint: `/generateStory`
- Méthode: POST
- Body:

json
{
"childName": "string",
"childAge": "number",
"theme": "string",
"length": "string",
"genre": "string"
}


6. Stratégies SCM et QA

6.1 Gestion du Code Source (Git)
Branches
- main: Production
- develop: Développement
- feature: Nouvelles fonctionnalités
- bugfix: Corrections de bugs
- release: Préparation des releases

Workflow
1. Création de branch feature depuis “develop”
2. Développement et tests
3. Pull Request vers develop
4. Code Review
5. Merge vers develop
6. Tests d'intégration
7. Merge vers main pour production

6.2 Assurance Qualité
Tests Unitaires
- Jest pour la logique métier
- React Native Testing Library pour les composants
Tests d'Intégration
- Cypress pour les tests E2E
- Tests manuels sur différents appareils

CI/CD
- GitHub Actions pour:
- Linting (ESLint)
- Tests automatisés
- Build de l'application
- Déploiement automatique

7. Justifications Techniques

7.1 Choix Technologiques
React Native + Expo
- Pourquoi: Développement cross-platform efficace

- Avantages:
- Un seul code base pour iOS et Android
- Large écosystème de composants
- Hot Reloading pour développement rapide

Firebase
- Pourquoi: Backend as a Service complet

- Avantages:
- Authentication prête à l'emploi
- Base de données temps réel
- Scalabilité automatique
- Analytics intégrés

OpenAI API
- Pourquoi: Génération de texte de haute qualité

- Avantages:
- Qualité narrative supérieure
- Personnalisation fine
- API stable et documentée

